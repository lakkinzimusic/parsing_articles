const config = require('../config/config')let fs = require('fs').promises;class DB {    constructor(name, selectors) {        this.name = name;        this.selectors = selectors;        this.count = 0    }    async clean_db_file() {        let json = await fs.readFile('db.json')        json = JSON.parse(json);        json = []        await fs.writeFile('db.json', JSON.stringify(json))    }    async filter_db_json(answers) {        let json = await  fs.readFile('db.json');        json = JSON.parse(json);        let filtered_json = json.filter(js => {            return this.filter(js, answers)        });        console.log(filtered_json)        return filtered_json;    }    filter(object, answers) {        let obj_head = object.header.toLowerCase()        let ans_head = answers.header.toLowerCase()        console.log(object.header.indexOf(answers.header))        let flag = false        if (obj_head.indexOf(ans_head) > -1) {            flag = true        }        if (object.domen.indexOf(answers.domen) > -1) {            flag = true        }        return flag;    }    async article_info_forming(parser) {        let counter = 1;        for await (let article of parser.articles) {            article.header = article.header.replace(/[\\/:"*?<>|]/g, '');            article.article_info = {};            article.article_info.header = article.header;            article.article_info.domen = parser.DOMEN;            article.article_info.date = getDate();            article.article_info.tags = [];            article.article_info.id = await set_id(counter);            counter++;        }        return parser;    }    async writeDbInfo(articles) {        let json = await fs.readFile('db.json')        json = JSON.parse(json);        articles.forEach(article => {            article.existing = false;            json.forEach(js => {                if (js.header === article.header) {                    article.existing = true                }            });            if (!article.existing) {                json.push(article.article_info);            }        });        await fs.writeFile('db.json', JSON.stringify(json))    }}async function set_id(counter) {    let json = await fs.readFile('db.json')    json = JSON.parse(json);    if (json.length === 0 && counter === 0) {        return 0    } else {        return json.length + counter    }}function getDate() {    let d = new Date();    let day = d.getDate() - 1;    let month = d.getMonth() + 1;    let year = d.getFullYear();    return day + "." + month + "." + year;}module.exports = DB;